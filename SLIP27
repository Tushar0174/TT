..............................java..........................................


interface Shape 
{ 
void draw(); 
} 

class RoundedRectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RR"); 
 } 
} 
class RoundedSquare implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside RS"); 
 } 
} 
class Rectangle implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple R"); 
 } 
} 
class Square implements Shape 
{ 
 public void draw() 
 { 
 System.out.println(" Inside Simple Sq"); 
 } 
} 
abstract class AbstractFactory 
{ 
 abstract Shape getShape( String st); 
} 
class ShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 
 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new Rectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new Square();} 
 return null; 
 } 
} 
class RoundedShapeFactory extends AbstractFactory 
{ 
 public Shape getShape( String st) 

 { 
 if(st.equalsIgnoreCase("Rectangle")) 
 { return new RoundedRectangle();} 
 else if(st.equalsIgnoreCase("Square")) 
 { return new RoundedSquare();} 
 return null; 
 } 
} 
class FactoryProducer 
{ 
 public static AbstractFactory getFactory(boolean rounded) 
 { 
 if (rounded) 
 { return new RoundedShapeFactory();} 
 else 
 { return new ShapeFactory();} 
 } 
} 
public class Main 
{ 
 public static void main(String[]args) 
 { 
 AbstractFactory shapeFactory=FactoryProducer.getFactory(false); 
 Shape shape1=shapeFactory.getShape("Rectangle"); 
 shape1.draw(); 
 Shape shape2=shapeFactory.getShape("SQuare"); 
 shape2.draw(); 
 
 AbstractFactory shapeFactory1=FactoryProducer.getFactory(true); 
 Shape shape3=shapeFactory1.getShape("REctangle"); 
 shape3.draw(); 
 
 Shape shape4=shapeFactory1.getShape("square"); 
 shape4.draw(); 
 } 
}




.......................ML.....................



//ML-Polynomial LinearRegression

# Implement polynomial regression on given dataset
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
 
# Importing the dataset
datas = pd.read_csv('D:\data.csv')
print(datas)
X = datas.iloc[:, 1:2].values
y = datas.iloc[:, 2].values
from sklearn.linear_model import LinearRegression
lin = LinearRegression()
 
lin.fit(X, y)
from sklearn.preprocessing import PolynomialFeatures
 
poly = PolynomialFeatures(degree = 4)
X_poly = poly.fit_transform(X)
plt.scatter(X, y, color = 'blue')
 
plt.plot(X, lin.predict(X), color = 'red')
#plt.title('Linear Regression')
#plt.xlabel('Temperature')
#plt.ylabel('Pressure')
plt.show()
poly.fit(X_poly, y)
lin2 = LinearRegression()
lin2.fit(X_poly, y)
plt.scatter(X, y, color = 'blue')
 
plt.plot(X, lin2.predict(poly.fit_transform(X)), color = 'red')
#plt.title('Polynomial Regression')
#plt.xlabel('Temperature')
#plt.ylabel('Pressure')
 
plt.show()
pred = 110.0
predarray = np.array([[pred]])
print(lin.predict(predarray))
pred2 = 110.0
pred2array = np.array([[pred2]])
print(lin2.predict(poly.fit_transform(pred2array)))
